#!/usr/bin/env python3
"""
GENESIS-SOVEREIGN Example Integration
Shows how to use Aria's execution loop for autonomous software creation
"""

import asyncio
import os
from pathlib import Path
from agent import AriaAgent
from execution_loop import enhance_aria_with_execution
from github_integration import GitHubIntegration
from aws_deployer import AWSDeployer


async def create_software_autonomously(user_request: str):
    """
    Full end-to-end autonomous software creation

    Args:
        user_request: Natural language description of software to build

    Returns:
        Dict with GitHub repo URL, AWS endpoint, and status
    """

    print(f"\n{'='*70}")
    print(f"GENESIS-SOVEREIGN: Autonomous Software Creation")
    print(f"{'='*70}\n")
    print(f"Request: {user_request}\n")

    # ========================================
    # PHASE 1: Initialize Aria with Execution Loop
    # ========================================
    print("Phase 1: Initializing Aria with execution loop...")

    config = {
        "aria": {
            "ollama_url": "http://localhost:11434",
            "model": "deepseek-coder-v2:latest"
        },
        "trinity": {
            "enabled": True  # Enable Trinity for code review
        },
        "vscode": {
            "workspace_path": "./genesis_output"
        },
        "learning": {
            "enabled": False  # Disable for hackathon (faster)
        }
    }

    aria = AriaAgent(config)
    aria = await enhance_aria_with_execution(aria)

    print("‚úÖ Aria initialized with execution loop\n")

    # ========================================
    # PHASE 2: Generate Perfect Code
    # ========================================
    print("Phase 2: Generating and testing code...")
    print("  - Generating initial code")
    print("  - Running tests in sandbox")
    print("  - Fixing any errors (up to 10 iterations)")
    print("  - Scanning for security vulnerabilities")
    print("  - Optimizing performance")
    print("  - Getting Trinity review from 4 AIs")
    print("  - Final verification\n")

    result = await aria.generate_perfect_code(user_request)

    if result["status"] != "perfect":
        print(f"‚ùå Code generation failed: {result}")
        return {
            "success": False,
            "error": "Code generation did not reach perfect status"
        }

    print("‚úÖ Code generation complete!\n")
    print(f"Files created: {len(result['files'])}")
    print(f"Total lines: {result['metrics']['total_lines']}")
    print(f"Tests passed: All files tested ‚úÖ")
    print(f"Security: All files clean ‚úÖ")
    print(f"Trinity reviewed: {result.get('trinity_reviewed', False)} ‚úÖ\n")

    # Show file details
    print("Generated files:")
    for file_info in result["files"]:
        print(f"  - {file_info['filename']}")
        print(f"    Tests: {file_info.get('tests_passed', 0)} passed")
        print(f"    Security: {file_info.get('security', 'unknown')}")
        print(f"    Iterations to perfect: {file_info.get('iterations', 0)}")
    print()

    # ========================================
    # PHASE 3: Create GitHub Repository
    # ========================================
    print("Phase 3: Creating GitHub repository...")

    github = GitHubIntegration(
        token=os.getenv("GITHUB_TOKEN"),
        org=os.getenv("GITHUB_ORG")  # Optional
    )

    # Generate repo name from request
    repo_name = user_request.lower().replace(" ", "-")[:50]
    if not repo_name:
        repo_name = "genesis-generated-project"

    repo_result = await github.create_and_deploy(
        repo_name=repo_name,
        description=f"Auto-generated by GENESIS-SOVEREIGN: {user_request}",
        files=result["files"],
        metadata={
            "generator": "GENESIS-SOVEREIGN",
            "aria_version": "1.0",
            "tests_passed": result['metrics']['all_tested'],
            "security_clean": result['metrics']['all_secure'],
            "trinity_reviewed": result.get('trinity_reviewed', False)
        }
    )

    print(f"‚úÖ GitHub repository created: {repo_result['html_url']}\n")

    # ========================================
    # PHASE 4: Deploy to AWS
    # ========================================
    print("Phase 4: Deploying to AWS...")

    aws = AWSDeployer(
        region=os.getenv("AWS_REGION", "us-east-1")
    )

    # Detect deployment type from code
    deployment_type = aws.detect_deployment_type(result["files"])
    print(f"  Detected deployment type: {deployment_type}")

    deployment_result = await aws.deploy(
        files=result["files"],
        deployment_type=deployment_type,
        project_name=repo_name
    )

    print(f"‚úÖ Deployed to AWS!")
    print(f"  Endpoint: {deployment_result['endpoint']}")
    print(f"  Type: {deployment_result['type']}")
    print(f"  Region: {deployment_result['region']}\n")

    # ========================================
    # PHASE 5: Final Report
    # ========================================
    print(f"\n{'='*70}")
    print("GENESIS-SOVEREIGN: Software Creation Complete! üöÄ")
    print(f"{'='*70}\n")

    final_report = {
        "success": True,
        "request": user_request,
        "github": {
            "url": repo_result['html_url'],
            "clone_url": repo_result['clone_url']
        },
        "deployment": {
            "endpoint": deployment_result['endpoint'],
            "type": deployment_result['type'],
            "region": deployment_result['region']
        },
        "code_quality": {
            "files": len(result["files"]),
            "lines": result['metrics']['total_lines'],
            "tests_passed": result['metrics']['all_tested'],
            "security_clean": result['metrics']['all_secure'],
            "trinity_reviewed": result.get('trinity_reviewed', False)
        },
        "guarantee": result.get("guarantee", "Code tested and verified")
    }

    print("üìä Summary:")
    print(f"  Files: {final_report['code_quality']['files']}")
    print(f"  Lines of code: {final_report['code_quality']['lines']}")
    print(f"  Tests: ‚úÖ All passed")
    print(f"  Security: ‚úÖ All clean")
    print(f"  Trinity reviewed: ‚úÖ {final_report['code_quality']['trinity_reviewed']}")
    print()
    print(f"üîó GitHub: {final_report['github']['url']}")
    print(f"üåê Live API: {final_report['deployment']['endpoint']}")
    print()
    print("üí° This software was created autonomously in < 2 minutes")
    print("   No human coding required!")
    print()

    return final_report


async def demo_examples():
    """
    Run demo examples for hackathon presentation
    """

    examples = [
        "Create a REST API for task management with authentication",
        "Build a URL shortener service with analytics",
        "Create a file upload service with virus scanning",
    ]

    print("\n" + "="*70)
    print("GENESIS-SOVEREIGN DEMO - Multiple Examples")
    print("="*70 + "\n")

    results = []

    for i, example in enumerate(examples, 1):
        print(f"\n{'='*70}")
        print(f"EXAMPLE {i}/{len(examples)}")
        print(f"{'='*70}\n")

        result = await create_software_autonomously(example)
        results.append(result)

        if result["success"]:
            print(f"‚úÖ Example {i} complete!\n")
        else:
            print(f"‚ùå Example {i} failed\n")

    # Summary
    print("\n" + "="*70)
    print("DEMO COMPLETE - All Examples")
    print("="*70 + "\n")

    successful = sum(1 for r in results if r["success"])
    print(f"Success rate: {successful}/{len(examples)} ({successful/len(examples)*100:.0f}%)")
    print()

    for i, result in enumerate(results, 1):
        if result["success"]:
            print(f"Example {i}: ‚úÖ")
            print(f"  GitHub: {result['github']['url']}")
            print(f"  API: {result['deployment']['endpoint']}")
        else:
            print(f"Example {i}: ‚ùå {result.get('error', 'Unknown error')}")

    return results


# ========================================
# Main Entry Points
# ========================================

async def main():
    """Main entry point for single software creation"""

    # Get request from command line or use default
    import sys
    if len(sys.argv) > 1:
        user_request = " ".join(sys.argv[1:])
    else:
        user_request = "Create a REST API for user management with JWT authentication"

    result = await create_software_autonomously(user_request)

    return result


async def run_demo():
    """Run full demo with multiple examples"""
    return await demo_examples()


if __name__ == "__main__":
    # Check for demo mode
    import sys
    if "--demo" in sys.argv:
        asyncio.run(run_demo())
    else:
        asyncio.run(main())
